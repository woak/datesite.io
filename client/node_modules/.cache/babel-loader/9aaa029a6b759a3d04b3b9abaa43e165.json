{"ast":null,"code":"/*\n src/reducers/appReducer.js\n*/\nimport { Map } from 'immutable';\nimport Hashes from '../../node_modules/jshashes/hashes'; // docs for Hashes: https://github.com/h2non/jshashes\n\nimport { adminUsername, adminPassword, stagedEventName, stagedEventStart, stagedEventEnd, stagedNewsTitle, stagedNewsBody } from '../selectors/appSelector';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'TOGGLE_PAGE_VIEW':\n      return state.setIn(['viewFocus'], action.target);\n    // ------------ADMIN------------ \\\\\n\n    case 'CHANGE_ADMIN_USERNAME':\n      return state.setIn(['admin', 'username'], action.value);\n\n    case 'CHANGE_ADMIN_PASSWORD':\n      return state.setIn(['admin', 'password'], action.value);\n\n    case 'BANDMEMBER_VERIFICATION':\n      {\n        var currUsername = adminUsername(state);\n        var currPasshash = new Hashes.SHA512().hex(adminPassword(state));\n        return currUsername === action.credentials.username && currPasshash === action.credentials.password ? state.setIn(['viewFocus'], \"adminPage\") : state.setIn(['viewFocus'], \"admin\");\n      }\n    // ------------EVENTS------------ \\\\\n\n    case 'ADD_STAGED_EVENT_NAME':\n      return state.setIn(['stagedEvent', 'name'], // sanitize user input\n      action.value.replace(/\\W/g, ''));\n\n    case 'ADD_STAGED_EVENT_START':\n      return state.setIn(['stagedEvent', 'start'], action.value);\n\n    case 'ADD_STAGED_EVENT_END':\n      return state.setIn(['stagedEvent', 'end'], action.value);\n\n    case 'ADD_CALENDAR_EVENT':\n      {\n        var title = stagedEventName(state);\n        var startTime = stagedEventStart(state);\n        var endTime = stagedEventEnd(state);\n        fetch(\"/addEvent\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            event_title: title,\n            start_time: startTime,\n            end_time: endTime\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (response) {\n          // TODO TEDDY - FOR NOW ASSUME THE EVENT GETS ADDED CORRECTLY\n          console.log(response);\n        }); // set state to general admin page after adding an event\n\n        return state.setIn(['viewFocus'], \"adminPage\");\n      }\n    // ------------NEWS------------ \\\\\n\n    case 'ADD_NEWS_ENTRY':\n      {\n        // TODO TEDDY: STUB\n        console.log(\"STAGED TITLE:\", stagedNewsTitle(state));\n        console.log(\"STAGED BODY:\", stagedNewsBody(state));\n\n        var _title = stagedNewsTitle(state);\n\n        var body = stagedNewsBody(state);\n        fetch(\"/addNews\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            title: _title,\n            body: body\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (response) {\n          // TODO TEDDY - FOR NOW ASSUME THE EVENT GETS ADDED CORRECTLY\n          console.log(response);\n        }); // set state to general admin page after adding news\n\n        return state.setIn(['viewFocus'], \"adminPage\");\n      }\n\n    case 'ADD_NEWS_TITLE':\n      return state.setIn(['stagedNews', 'title'], action.value);\n\n    case 'ADD_NEWS_BODY':\n      return state.setIn(['stagedNews', 'body'], action.value);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/teddy/dev/practice/datesite.io/client/src/reducers/appReducer.js"],"names":["Map","Hashes","adminUsername","adminPassword","stagedEventName","stagedEventStart","stagedEventEnd","stagedNewsTitle","stagedNewsBody","state","action","type","setIn","target","value","currUsername","currPasshash","SHA512","hex","credentials","username","password","replace","title","startTime","endTime","fetch","method","body","JSON","stringify","event_title","start_time","end_time","headers","then","response","console","log"],"mappings":"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","sourcesContent":["/*\n src/reducers/appReducer.js\n*/\nimport { Map } from 'immutable';\n\nimport Hashes from '../../node_modules/jshashes/hashes';\n// docs for Hashes: https://github.com/h2non/jshashes\n\nimport {\n  adminUsername,\n  adminPassword,\n\n  stagedEventName,\n  stagedEventStart,\n  stagedEventEnd,\n\n  stagedNewsTitle,\n  stagedNewsBody,\n} from '../selectors/appSelector'\n\n\nexport default (state = new Map(), action) => {\n\n  switch (action.type) {\n\n    case 'TOGGLE_PAGE_VIEW': return state.setIn(['viewFocus'], action.target)\n\n    // ------------ADMIN------------ \\\\\n\n    case 'CHANGE_ADMIN_USERNAME': return state.setIn(\n      ['admin', 'username'], action.value\n    )\n\n    case 'CHANGE_ADMIN_PASSWORD': return state.setIn(\n      ['admin', 'password'], action.value\n    )\n\n    case 'BANDMEMBER_VERIFICATION': {\n      let currUsername = adminUsername(state);\n      let currPasshash = new Hashes.SHA512().hex(adminPassword(state));\n      return (currUsername === action.credentials.username && \n              currPasshash === action.credentials.password) \n          ? state.setIn(['viewFocus'], \"adminPage\") \n          : state.setIn(['viewFocus'], \"admin\")\n    }\n\n    // ------------EVENTS------------ \\\\\n\n    case 'ADD_STAGED_EVENT_NAME': return state.setIn(\n      ['stagedEvent', 'name'],\n      // sanitize user input\n      action.value.replace(/\\W/g, '')\n    )\n\n    case 'ADD_STAGED_EVENT_START': return state.setIn(\n      ['stagedEvent', 'start'],\n      action.value\n    )\n\n    case 'ADD_STAGED_EVENT_END': return state.setIn(\n      ['stagedEvent', 'end'],\n      action.value\n    )\n\n    case 'ADD_CALENDAR_EVENT': {\n      let title = stagedEventName(state);\n      let startTime = stagedEventStart(state);\n      let endTime = stagedEventEnd(state)\n\n      fetch(\"/addEvent\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          event_title: title,\n          start_time: startTime,\n          end_time: endTime,\n        }),\n        headers: {\"Content-Type\": \"application/json\"}\n      }).then(response => {\n        // TODO TEDDY - FOR NOW ASSUME THE EVENT GETS ADDED CORRECTLY\n        console.log(response)\n      });\n      // set state to general admin page after adding an event\n      return state.setIn(['viewFocus'], \"adminPage\");\n    }\n\n    // ------------NEWS------------ \\\\\n\n    case 'ADD_NEWS_ENTRY': {\n      // TODO TEDDY: STUB\n      console.log(\"STAGED TITLE:\", stagedNewsTitle(state))\n      console.log(\"STAGED BODY:\", stagedNewsBody(state))\n      let title = stagedNewsTitle(state);\n      let body = stagedNewsBody(state)\n\n      fetch(\"/addNews\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          title,\n          body,\n        }),\n        headers: {\"Content-Type\": \"application/json\"}\n      }).then(response => {\n        // TODO TEDDY - FOR NOW ASSUME THE EVENT GETS ADDED CORRECTLY\n        console.log(response)\n      });\n      // set state to general admin page after adding news\n      return state.setIn(['viewFocus'], \"adminPage\");\n    }\n\n    case 'ADD_NEWS_TITLE': return state.setIn(\n      ['stagedNews', 'title'], \n      action.value);\n\n    case 'ADD_NEWS_BODY': return state.setIn(\n      ['stagedNews', 'body'], \n      action.value);\n\n    default: return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}